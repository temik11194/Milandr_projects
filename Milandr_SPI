#include "MDR32Fx.h"
#include "MDR32F9Qx_board.h"
#include "MDR32F9Qx_port.h"
#include "MDR32F9Qx_rst_clk.h"
#include "MDR32F9Qx_ssp.h"

/* Private typedef -----------------------------------------------------------*/
typedef enum { FAILED = 0, PASSED = !FAILED} TestStatus;

/* Private define ------------------------------------------------------------*/
#define BufferSize         32

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
SSP_InitTypeDef sSSP;
PORT_InitTypeDef PORT_InitStructure;

uint16_t SrcBuf1[BufferSize];
uint16_t SrcBuf2[BufferSize];
uint16_t DstBuf1[BufferSize];
uint16_t DstBuf2[BufferSize];

uint8_t TxIdx = 0, RxIdx = 0;
uint16_t data = 0x49;
uint16_t result;
int j;

volatile TestStatus TransferStatus1 = FAILED, TransferStatus2 = FAILED;

/* Private function prototypes -----------------------------------------------*/
void Init_RAM (uint16_t *addr, uint32_t size);
uint32_t ps_rand(uint32_t addr);
TestStatus Verif_mem (uint32_t BufSize, uint16_t *pBuffer1, uint16_t *pBuffer2);

/* Private functions ---------------------------------------------------------*/

void delay(int a) //временная задержка выходного сигнала
{
	int i = 0;
	for(i = 0; i <= a; i++) {}
}

/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
  //RST_CLK_DeInit();
  //RST_CLK_CPU_PLLconfig (RST_CLK_CPU_PLLsrcHSIdiv2,0);
	/****************************/
	
							/* Включение HSE осциллятора (внешнего кварцевого резонатора)*/
					RST_CLK_HSEconfig(RST_CLK_HSE_ON);
				if (RST_CLK_HSEstatus() == SUCCESS) /* Если HSE осциллятор включился и прошел текст*/
				{
							// Выбор HSE осциллятора в качестве источника тактовых импульсов для CPU_PLL
							// и установка умножителя тактовой частоты CPU_PLL равного 7 // Частота внешнего кварца равна 8 МГц Максимальная частота процессора 80 МГц ,
							// RST_CLK_CPU_PLLconfig ( Источник тактирования PLL, Коэффициент умножения 10=9+1);
							RST_CLK_CPU_PLLconfig ( RST_CLK_CPU_PLLsrcHSEdiv1, 9 ); //9
											/* Включение схемы PLL*/
							RST_CLK_CPU_PLLcmd(ENABLE);
					if (RST_CLK_CPU_PLLstatus() == SUCCESS) //Если включение CPU_PLL прошло успешно
					{
								/* Установка CPU_C3_prescaler = 2 */
								RST_CLK_CPUclkPrescaler(RST_CLK_CPUclkDIV2);
								/* Установка CPU_C2_SEL от CPU_PLL выхода вместо CPU_C1 такта*/
								RST_CLK_CPU_PLLuse(ENABLE);
								/* Выбор CPU_C3 такта на мультиплексоре тактовых импульсов микропроцессора (CPU clock MUX) */
								RST_CLK_CPUclkSelection(RST_CLK_CPUclkCPU_C3);
					}
				else /* блок CPU_PLL не включился*/
						{while(1);}
				}
				else /* кварцевый резонатор HSE не включился */
				{while(1);}
	/****************************************/
  /* Enable peripheral clocks --------------------------------------------------*/
  RST_CLK_PCLKcmd((RST_CLK_PCLK_RST_CLK | RST_CLK_PCLK_SSP1 | RST_CLK_PCLK_SSP2),ENABLE);
  RST_CLK_PCLKcmd((RST_CLK_PCLK_PORTF | RST_CLK_PCLK_PORTD), ENABLE);

   //Init NVIC 
//  SCB->AIRCR = 0x05FA0000 | ((uint32_t)0x500);
//  SCB->VTOR = 0x08000000;
  //Disable all interrupt
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICER[0] = 0xFFFFFFFF;

  /* Disable all DMA request */
  MDR_DMA->CHNL_REQ_MASK_CLR = 0xFFFFFFFF;
  MDR_DMA->CHNL_USEBURST_CLR = 0xFFFFFFFF;

  /* Reset PORTD settings */
  PORT_DeInit(MDR_PORTD);
  /* Reset PORTF settings */
  PORT_DeInit(MDR_PORTF);

/*
 // Configure SSP2 pins: FSS, CLK, RXD, TXD 

  // Configure PORTD pins 2, 3, 5, 6 
  PORT_InitStructure.PORT_Pin   = (PORT_Pin_2 | PORT_Pin_3 | PORT_Pin_5);
  PORT_InitStructure.PORT_OE    = PORT_OE_IN;
  PORT_InitStructure.PORT_FUNC  = PORT_FUNC_ALTER;
  PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
  PORT_InitStructure.PORT_SPEED = PORT_SPEED_FAST;
  PORT_Init(MDR_PORTD, &PORT_InitStructure);
  PORT_InitStructure.PORT_OE    = PORT_OE_OUT;
  PORT_InitStructure.PORT_Pin   = (PORT_Pin_6);
  PORT_Init(MDR_PORTD, &PORT_InitStructure);
*/

  /* Configure SSP1 pins: FSS, CLK, RXD, TXD */

  /* Configure PORTF pins 0, 1, 2, 3 */
  PORT_InitStructure.PORT_Pin   = (PORT_Pin_3);
  PORT_InitStructure.PORT_OE    = PORT_OE_IN;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_ALTER;
  PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
  PORT_InitStructure.PORT_SPEED = PORT_SPEED_FAST;
  PORT_Init(MDR_PORTF, &PORT_InitStructure);
  PORT_InitStructure.PORT_Pin   = (PORT_Pin_0 | PORT_Pin_1 | PORT_Pin_2);
  PORT_InitStructure.PORT_OE    = PORT_OE_OUT;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_ALTER;
  PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
  PORT_InitStructure.PORT_SPEED = PORT_SPEED_FAST;
  PORT_Init(MDR_PORTF, &PORT_InitStructure);
	
					//Включение тактирования порта D
					RST_CLK_PCLKcmd(RST_CLK_PCLK_PORTD,ENABLE);
					PORT_StructInit(&PORT_InitStructure);
					
						//Заполнение структуры для инициализации порта
					PORT_InitStructure.PORT_MODE = PORT_MODE_DIGITAL;
					
						//Конфигурируем ножку 3 порта D как выход
					PORT_InitStructure.PORT_OE 			= PORT_OE_OUT;
					PORT_InitStructure.PORT_Pin 		= PORT_Pin_3;
					PORT_InitStructure.PORT_SPEED 	= PORT_SPEED_FAST;
					PORT_InitStructure.PORT_PULL_UP = PORT_PULL_UP_OFF;
					PORT_InitStructure.PORT_PULL_DOWN = PORT_PULL_DOWN_OFF;
					PORT_Init(MDR_PORTD, &PORT_InitStructure);
/*
  // Init RAM
  Init_RAM (DstBuf1, BufferSize);
  Init_RAM (SrcBuf1, BufferSize);
  Init_RAM (DstBuf2, BufferSize);
  Init_RAM (SrcBuf2, BufferSize);
*/
PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
  /* Reset all SSP settings */
  SSP_DeInit(MDR_SSP1);
  //SSP_DeInit(MDR_SSP2);

  SSP_BRGInit(MDR_SSP1,SSP_HCLKdiv16);
  //SSP_BRGInit(MDR_SSP2,SSP_HCLKdiv16);

  /* SSP1 MASTER configuration ------------------------------------------------*/
  SSP_StructInit (&sSSP);

  sSSP.SSP_SCR  = 0x02;
  sSSP.SSP_CPSDVSR = 2;
  sSSP.SSP_Mode = SSP_ModeMaster;
  sSSP.SSP_WordLength = SSP_WordLength8b; //*****************************************************16
  sSSP.SSP_SPH = SSP_SPH_1Edge;
  sSSP.SSP_SPO = SSP_SPO_Low;
  sSSP.SSP_FRF = SSP_FRF_SPI_Motorola;
  sSSP.SSP_HardwareFlowControl = SSP_HardwareFlowControl_SSE;
  SSP_Init (MDR_SSP1,&sSSP);

  /* Enable SSP1 */
  SSP_Cmd(MDR_SSP1, ENABLE);
  /* Enable SSP2 */
//  SSP_Cmd(MDR_SSP2, ENABLE);
/*
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(5000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(5000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(5000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(5000000); // длительность выходного сигнала
							*/

  /* Transfer procedure */
	PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"

												/* Transfer procedure */


				SSP_SendData(MDR_SSP1, 0x05); //Read status register
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				SSP_SendData(MDR_SSP1, 0x00);
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
					
					if (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == RESET)
					{
					PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
					//delay(1000);
					PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
					}
				
				SSP_SendData(MDR_SSP1, 0x06); // Write enable
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
					
					if (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == RESET)
					{
					PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
					PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
					}
				
				SSP_SendData(MDR_SSP1, 0x05); //Read status register
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				SSP_SendData(MDR_SSP1, 0x00);
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
					
					if (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == RESET)
					{
					PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
					//delay(1000);
					PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
					}
				
				SSP_SendData(MDR_SSP1, 0x02);//Write to memory array
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				
				SSP_SendData(MDR_SSP1, 0x00); //adress start
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				SSP_SendData(MDR_SSP1, 0x02); //adress end
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				
				SSP_SendData(MDR_SSP1, 0x49); //data
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				//	SSP_SendData(MDR_SSP1, 0x00); //data
				//while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				
					if (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == RESET)
					{
					PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
					PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
					}
				
				SSP_SendData(MDR_SSP1, 0x04); //Write disable
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				
					if (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == RESET)
					{
					PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
					PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
					}
				
				for (j = 0; j <= 30; j++) //20
				{
					
				SSP_SendData(MDR_SSP1, 0x05); //Read status register
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				SSP_SendData(MDR_SSP1, 0x00);
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
					
					if (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == RESET)
					{
					PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
					delay(1000);
					PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
					}
				}
					
													/*Reading procedure*/
				/*
				SSP_SendData(MDR_SSP1, 0x03); //Read from memory array
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				
				SSP_SendData(MDR_SSP1, 0x00); //adress start
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				SSP_SendData(MDR_SSP1, 0x02); //adress end
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
				
				SSP_SendData(MDR_SSP1, 0x00); //wait for input data
				result = SSP_ReceiveData(MDR_SSP1);	
				while (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == SET) {}
					
					if (SSP_GetFlagStatus(MDR_SSP1, SSP_FLAG_BSY) == RESET)
					{
					PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
					//PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
					}
				*/

		/*
		for (j = 0;j <= BufferSize;j++)
		{
			if ((j==0)||(j==1)||(j==8)||(j==25))
			{
				SrcBuf1[j] |= 0x01;
			}
			else
			{
				SrcBuf1[j] |= 0x00;
			}
			//MDR_SSP1->DR = SrcBuf1[j];
		}
		SSP_SendData(MDR_SSP1, (uint32_t)SrcBuf1);
		*/
		
		/*
		SSP_SendData(MDR_SSP1, 0x600);
		SSP_SendData(MDR_SSP1, 0x200);
		SSP_SendData(MDR_SSP1, 0x01);
		SSP_SendData(MDR_SSP1, 0x49);
		SSP_SendData(MDR_SSP1, 0x400);
		SSP_SendData(MDR_SSP1, 0x300);
		SSP_SendData(MDR_SSP1, 0x01);
		*/
/*
			while (1)
			{				
		if (result == 0x49)
					{
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(10000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(10000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(50000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(50000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
					}
					else if (result == 0x00)
					{
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(5000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(5000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(5000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(5000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(5000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(5000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(5000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(5000000); // длительность выходного сигнала
					}
					else
					{
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(10000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(10000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(10000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(10000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(10000000); // длительность выходного сигнала
					}
				}*/
//  }
	
	/*
							PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
							delay(5000000); // длительность выходного сигнала
							PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
							delay(1000000); // длительность выходного сигнала	
	TransferStatus1 = Verif_mem ((BufferSize), SrcBuf1, DstBuf1);
											while (1)
											{
											 if (TransferStatus1 == PASSED)
												{
													PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
													delay(1000000); // длительность выходного сигнала
													PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
													delay(1000000); // длительность выходного сигнала
													PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
													delay(1000000); // длительность выходного сигнала
													PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
													delay(1000000); // длительность выходного сигнала
													PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
													delay(5000000); // длительность выходного сигнала
													PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
													delay(1000000); // длительность выходного сигнала
													PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
													delay(5000000); // длительность выходного сигнала
													PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
													delay(1000000); // длительность выходного сигнала
												}
												else
													{
															PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
															delay(500000); // длительность выходного сигнала
															PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
															delay(500000); // длительность выходного сигнала
															PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
															delay(500000); // длительность выходного сигнала
															PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
															delay(500000); // длительность выходного сигнала
															PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
															delay(500000); // длительность выходного сигнала
															PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
															delay(500000); // длительность выходного сигнала
															PORT_SetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "1"
															delay(500000); // длительность выходного сигнала
															PORT_ResetBits(MDR_PORTD, PORT_Pin_3); //Установка лог. "0"
															delay(500000); // длительность выходного сигнала
													}
											}	
	
*/
  /* Check the corectness of written dada */
//  TransferStatus1 = Verif_mem ((BufferSize), SrcBuf1, DstBuf2);
  //TransferStatus2 = Verif_mem ((BufferSize), SrcBuf2, DstBuf1);
  /* TransferStatus1, TransferStatus2 = PASSED, if the data transmitted and received
     are correct */
  /* TransferStatus1, TransferStatus2 = FAILED, if the data transmitted and received
     are different */
}
